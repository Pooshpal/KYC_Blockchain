export type SupportedFormat = 'dag-cbor' | 'dag-pb' | 'raw';
import { default as parseDuration } from "parse-duration";
import CID = require("cids");
import mh_1 = require("multihashes");
import mh = mh_1.multihash;
import multibase = require("multibase");
declare const command: string;
declare const describe: string;
declare const builder: {
    data: {
        type: string;
    };
    format: {
        type: string;
        alias: string;
        default: string;
        describe: string;
        choices: string[];
    };
    'input-encoding': {
        type: string;
        alias: string;
        default: string;
        describe: string;
        choices: string[];
    };
    pin: {
        type: string;
        default: boolean;
        describe: string;
    };
    'hash-alg': {
        type: string;
        alias: string;
        default: string;
        describe: string;
        choices: string[];
    };
    'cid-version': {
        type: string;
        describe: string;
        default: number;
    };
    'cid-base': {
        describe: string;
        type: string;
        choices: string[];
    };
    preload: {
        type: string;
        default: boolean;
        describe: string;
    };
    'only-hash': {
        type: string;
        default: boolean;
        describe: string;
    };
    timeout: {
        type: string;
        coerce: typeof parseDuration;
    };
};
/**
 * @param {object} argv
 * @param {import('../../types').Context} argv.ctx
 * @param {string} argv.data
 * @param {'dag-cbor' | 'dag-pb' | 'raw' | 'cbor' | 'protobuf'} argv.format
 * @param {'json' | 'cbor' | 'raw' | 'protobuf'} argv.inputEncoding
 * @param {import('cids').CIDVersion} argv.cidVersion
 * @param {boolean} argv.pin
 * @param {import('multihashes').HashName} argv.hashAlg
 * @param {import('multibase').BaseName} argv.cidBase
 * @param {boolean} argv.preload
 * @param {boolean} argv.onlyHash
 * @param {number} argv.timeout
 */
declare function handler({ ctx: { ipfs, print, getStdin }, data, format, inputEncoding, pin, hashAlg, cidVersion, cidBase, preload, onlyHash, timeout }: {
    ctx: import("../../types").Context;
    data: string;
    format: "dag-pb" | "protobuf" | "cbor" | "raw" | "dag-cbor";
    inputEncoding: "json" | "protobuf" | "cbor" | "raw";
    cidVersion: CID.CIDVersion;
    pin: boolean;
    hashAlg: mh.HashName;
    cidBase: multibase.BaseName;
    preload: boolean;
    onlyHash: boolean;
    timeout: number;
}): Promise<void>;
/**
 * @param {object} argv
 * @param {import('../../types').Context} argv.ctx
 * @param {string} argv.data
 * @param {'dag-cbor' | 'dag-pb' | 'raw' | 'cbor' | 'protobuf'} argv.format
 * @param {'json' | 'cbor' | 'raw' | 'protobuf'} argv.inputEncoding
 * @param {import('cids').CIDVersion} argv.cidVersion
 * @param {boolean} argv.pin
 * @param {import('multihashes').HashName} argv.hashAlg
 * @param {import('multibase').BaseName} argv.cidBase
 * @param {boolean} argv.preload
 * @param {boolean} argv.onlyHash
 * @param {number} argv.timeout
 */
declare function handler({ ctx: { ipfs, print, getStdin }, data, format, inputEncoding, pin, hashAlg, cidVersion, cidBase, preload, onlyHash, timeout }: {
    ctx: import("../../types").Context;
    data: string;
    format: "dag-pb" | "protobuf" | "cbor" | "raw" | "dag-cbor";
    inputEncoding: "json" | "protobuf" | "cbor" | "raw";
    cidVersion: CID.CIDVersion;
    pin: boolean;
    hashAlg: mh.HashName;
    cidBase: multibase.BaseName;
    preload: boolean;
    onlyHash: boolean;
    timeout: number;
}): Promise<void>;
export {};
//# sourceMappingURL=put.d.ts.map