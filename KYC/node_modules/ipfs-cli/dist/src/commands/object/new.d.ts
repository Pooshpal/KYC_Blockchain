import { default as parseDuration } from "parse-duration";
import multibase = require("multibase");
export const command: string;
export const describe: string;
export const builder: {
    'cid-base': {
        describe: string;
        type: string;
        choices: string[];
    };
    timeout: {
        type: string;
        coerce: typeof parseDuration;
    };
};
/**
 * @param {object} argv
 * @param {import('../../types').Context} argv.ctx
 * @param {'unixfs-dir'} argv.template
 * @param {import('multibase').BaseName} argv.cidBase
 * @param {number} argv.timeout
 */
export function handler({ ctx: { ipfs, print }, template, cidBase, timeout }: {
    ctx: import("../../types").Context;
    template: "unixfs-dir";
    cidBase: multibase.BaseName;
    timeout: number;
}): Promise<void>;
/**
 * @param {object} argv
 * @param {import('../../types').Context} argv.ctx
 * @param {'unixfs-dir'} argv.template
 * @param {import('multibase').BaseName} argv.cidBase
 * @param {number} argv.timeout
 */
export function handler({ ctx: { ipfs, print }, template, cidBase, timeout }: {
    ctx: import("../../types").Context;
    template: "unixfs-dir";
    cidBase: multibase.BaseName;
    timeout: number;
}): Promise<void>;
//# sourceMappingURL=new.d.ts.map