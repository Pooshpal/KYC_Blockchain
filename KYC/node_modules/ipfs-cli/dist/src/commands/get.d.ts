import { default as parseDuration } from "parse-duration";
export const command: string;
export const describe: string;
export namespace builder {
    namespace output {
        export const alias: string;
        export const type: string;
        const _default: string;
        export { _default as default };
    }
    namespace force {
        const alias_1: string;
        export { alias_1 as alias };
        const type_1: string;
        export { type_1 as type };
        const _default_1: boolean;
        export { _default_1 as default };
    }
    namespace timeout {
        const type_2: string;
        export { type_2 as type };
        export { parseDuration as coerce };
    }
}
/**
 * @param {object} argv
 * @param {import('../types').Context} argv.ctx
 * @param {string} argv.ipfsPath
 * @param {string} argv.output
 * @param {boolean} argv.force
 * @param {number} argv.timeout
 */
export function handler({ ctx: { ipfs, print }, ipfsPath, output, force, timeout }: {
    ctx: import("../types").Context;
    ipfsPath: string;
    output: string;
    force: boolean;
    timeout: number;
}): Promise<void>;
/**
 * @param {object} argv
 * @param {import('../types').Context} argv.ctx
 * @param {string} argv.ipfsPath
 * @param {string} argv.output
 * @param {boolean} argv.force
 * @param {number} argv.timeout
 */
export function handler({ ctx: { ipfs, print }, ipfsPath, output, force, timeout }: {
    ctx: import("../types").Context;
    ipfsPath: string;
    output: string;
    force: boolean;
    timeout: number;
}): Promise<void>;
//# sourceMappingURL=get.d.ts.map