export = HttpApi;
declare class HttpApi {
    /**
     * @param {IPFS} ipfs
     */
    constructor(ipfs: IPFS);
    _ipfs: import("ipfs-core-types").IPFS;
    _log: debug.Debugger & {
        error: debug.Debugger;
    };
    /** @type {Server[]} */
    _apiServers: Server[];
    /**
     * Starts the IPFS HTTP server
     *
     * @returns {Promise<HttpApi>}
     */
    start(): Promise<HttpApi>;
    /**
     * @param {string} host
     * @param {string} port
     * @param {IPFS} ipfs
     * @param {Record<string, any>} cors
     */
    _createApiServer(host: string, port: string, ipfs: IPFS, cors: Record<string, any>): Promise<Hapi.Server>;
    get apiAddr(): Multiaddr;
    stop(): Promise<void>;
}
declare namespace HttpApi {
    export { IPFS, Server, IPLD, libp2p };
}
import debug = require("debug");
type Server = import('./types').Server;
type IPFS = import('ipfs-core-types').IPFS;
import Hapi = require("@hapi/hapi");
import { Multiaddr } from "multiaddr";
type IPLD = import('ipld');
type libp2p = import('libp2p');
//# sourceMappingURL=index.d.ts.map